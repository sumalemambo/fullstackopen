{"ast":null,"code":"var _jsxFileName = \"/home/epsilon/Desktop/dev/fullstackopen/part1/src/App.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*\n\n# Components\n\nIn javascript the following is a function that\ndoes not receive parameters\n\n() => (\n  <div>\n    <p>Hello world</p>\n  </div>\n)\n\nthe function is then assigned to a constant variable\ncalled App\n\nWe will modify the following fuction\n\nconst App = () => (\n  <div>\n    <p>Hello world</p>\n  </div>\n)\n\nto\n\nconst App = () => {\n  console.log('Hello from component')\n  return (\n    <div>\n      <p>Hello world</p>\n    </div>\n  )\n}\n\nIt is also possible to render dynamic content on the\ncomponent as follows\n\nconst App = () => {\n  const now = new Date()\n  const a = 10\n  const b = 20\n\n  return (\n    <div>\n      <p>Hello World, it is {now.toString()}</p>\n      <p>\n        {a} plus {b} is {a + b}\n      </p>\n    </div>\n  )\n\n# JSX\n\nIt seems like React components are returning HTML Markup. However,\nthat is not the case. The layout of React applications is mostly\nwritten using JSX. Under the hood, JSX returned by React components\nis compiled into Javascript.\n\nAfter compiling our code looks like this\n\nconst App = () => {\n  const now = new Date()\n  const a = 10\n  const b = 20\n  return React.createElement(\n    'div',\n    null,\n    React.createElement(\n      'p', null, 'Hello world, it is ', now.toString()\n    ),\n    React.createElement(\n      'p', null, a, ' plus ', b, ' is ', a + b\n    )\n  )\n}\n\n# Multiple components\n\nLets modify App.js as follows\n\nconst Hello = () => {\n  return (\n    <div>\n      <p>Hello world</p>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello />\n    </div>\n  )\n}\n\nNaturally, a component can be used multiple times\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello />\n      <Hello />\n      <Hello />\n    </div>\n  )\n}\n\n# props: passing data to components\n\nIt is posible to pass data to components using so-called props.\nLets modify the hello component as follows:\n\nconst Hello = (props) => {\n  return (\n    <div>\n    <p>Hello {props.name}</p>\n    </div>\n  )\n}\n\nNow the function defining the component as a parameter called props.\nAs an argument, the parameter receives an object, which has fields\ncorresponding to all the \"props\" the user of the component defines\n(in this case the user of the component is the App component).\n\nThe props are defined as follows:\n\n\n\n\n*/\n\nconst Hello = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hello world\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_c = Hello;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Greetings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hello, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hello, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hello, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Hello\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["Hello","App"],"sources":["/home/epsilon/Desktop/dev/fullstackopen/part1/src/App.js"],"sourcesContent":["/*\n\n# Components\n\nIn javascript the following is a function that\ndoes not receive parameters\n\n() => (\n  <div>\n    <p>Hello world</p>\n  </div>\n)\n\nthe function is then assigned to a constant variable\ncalled App\n\nWe will modify the following fuction\n\nconst App = () => (\n  <div>\n    <p>Hello world</p>\n  </div>\n)\n\nto\n\nconst App = () => {\n  console.log('Hello from component')\n  return (\n    <div>\n      <p>Hello world</p>\n    </div>\n  )\n}\n\nIt is also possible to render dynamic content on the\ncomponent as follows\n\nconst App = () => {\n  const now = new Date()\n  const a = 10\n  const b = 20\n\n  return (\n    <div>\n      <p>Hello World, it is {now.toString()}</p>\n      <p>\n        {a} plus {b} is {a + b}\n      </p>\n    </div>\n  )\n\n# JSX\n\nIt seems like React components are returning HTML Markup. However,\nthat is not the case. The layout of React applications is mostly\nwritten using JSX. Under the hood, JSX returned by React components\nis compiled into Javascript.\n\nAfter compiling our code looks like this\n\nconst App = () => {\n  const now = new Date()\n  const a = 10\n  const b = 20\n  return React.createElement(\n    'div',\n    null,\n    React.createElement(\n      'p', null, 'Hello world, it is ', now.toString()\n    ),\n    React.createElement(\n      'p', null, a, ' plus ', b, ' is ', a + b\n    )\n  )\n}\n\n# Multiple components\n\nLets modify App.js as follows\n\nconst Hello = () => {\n  return (\n    <div>\n      <p>Hello world</p>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello />\n    </div>\n  )\n}\n\nNaturally, a component can be used multiple times\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello />\n      <Hello />\n      <Hello />\n    </div>\n  )\n}\n\n# props: passing data to components\n\nIt is posible to pass data to components using so-called props.\nLets modify the hello component as follows:\n\nconst Hello = (props) => {\n  return (\n    <div>\n    <p>Hello {props.name}</p>\n    </div>\n  )\n}\n\nNow the function defining the component as a parameter called props.\nAs an argument, the parameter receives an object, which has fields\ncorresponding to all the \"props\" the user of the component defines\n(in this case the user of the component is the App component).\n\nThe props are defined as follows:\n\n\n\n\n*/\n\nconst Hello = () => {\n  return (\n    <div>\n      <p>Hello world</p>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello />\n      <Hello />\n      <Hello />\n    </div>\n  )\n}\n\n\n\nexport default App"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,KAAK,GAAG,MAAM;EAClB,oBACE;IAAA,uBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAkB;IAAA;IAAA;IAAA;EAAA,QACd;AAEV,CAAC;AAAA,KANKA,KAAK;AAQX,MAAMC,GAAG,GAAG,MAAM;EAChB,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAClB,QAAC,KAAK;MAAA;MAAA;MAAA;IAAA,QAAG,eACT,QAAC,KAAK;MAAA;MAAA;MAAA;IAAA,QAAG,eACT,QAAC,KAAK;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEV,CAAC;AAAA,MATKA,GAAG;AAaT,eAAeA,GAAG;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}